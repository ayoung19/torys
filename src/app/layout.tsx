import { SmartNavbar } from "@/components/SmartNavbar";
import prisma from "@/db";
import { Container } from "@chakra-ui/react";
import { ClerkProvider } from "@clerk/nextjs";
import { TZDate } from "@date-fns/tz";
import { AppShell, ModalsProvider, SaasProvider } from "@saas-ui/react";
import { endOfWeek, format } from "date-fns";
import type { Metadata } from "next";
import Link from "next/link";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const endOfThisWeek = format(endOfWeek(TZDate.tz("Pacific/Honolulu")), "yyyy-MM-dd");

  const timesheet = await prisma.timesheet.findUnique({
    where: {
      timesheetId: endOfThisWeek,
    },
  });

  if (timesheet === null) {
    const previousTimesheet = await prisma.timesheet.findFirst({
      orderBy: {
        timesheetId: "desc",
      },
      include: {
        employees: true,
        jobs: true,
      },
    });

    if (previousTimesheet === null) {
      await prisma.timesheet.create({
        data: {
          timesheetId: endOfThisWeek,
        },
      });
    } else {
      const newTimesheet = await prisma.timesheet.create({
        data: {
          timesheetId: endOfThisWeek,
        },
      });

      // Copy employees over from previous timesheet.
      await Promise.all(
        previousTimesheet.employees
          .map((employee) => ({
            ...employee,
            timesheetId: newTimesheet.timesheetId,
          }))
          .map((employee) => prisma.employee.create({ data: employee })),
      );

      // Copy jobs over from previous timesheet.
      await Promise.all(
        previousTimesheet.jobs
          .map((job) => ({
            ...job,
            timesheetId: newTimesheet.timesheetId,
          }))
          .map((job) => prisma.job.create({ data: job })),
      );

      // Add days to new jobs.
      const jobs = await prisma.job.findMany({
        where: {
          timesheetId: newTimesheet.timesheetId,
        },
      });

      await prisma.day.createMany({
        data: jobs.flatMap((job) =>
          Array.from(Array(7).keys()).map((dayId) => ({
            timesheetId: newTimesheet.timesheetId,
            jobId: job.jobId,
            dayId,
            description: "",
          })),
        ),
      });
    }
  }

  return (
    <ClerkProvider>
      <html lang="en" data-theme="light">
        <body>
          <SaasProvider linkComponent={Link}>
            <ModalsProvider>
              <AppShell navbar={<SmartNavbar />}>
                <Container maxW="container.xl" pt="4">
                  {children}
                </Container>
              </AppShell>
            </ModalsProvider>
          </SaasProvider>
        </body>
      </html>
    </ClerkProvider>
  );
}
