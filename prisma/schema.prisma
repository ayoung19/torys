// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  accountId String @id

  daysEdited Day[]
  actions    Action[]

  isActive    Boolean
  phoneNumber String
  accountType AccountType
}

enum AccountType {
  DEV
  ADMIN
  COORDINATOR
  FOREMAN
}

model Timesheet {
  timesheetId String @id

  employees Employee[]
  jobs      Job[]
}

model Employee {
  timesheetId String
  timesheet   Timesheet @relation(fields: [timesheetId], references: [timesheetId])
  employeeId  String    @default(uuid())

  entries Entry[]

  // Allowed to be added to entry.
  isActive                           Boolean
  // TODO: Make unique.
  displayId                          String
  name                               String
  phoneNumber                        String
  fringeCode                         String
  ratePrivateCentsPerHour            Int
  rateDavisBaconCentsPerHour         Int
  rateDavisBaconOvertimeCentsPerHour Int

  @@id(fields: [timesheetId, employeeId], name: "employeePrimaryKey")
}

model Job {
  timesheetId String
  timesheet   Timesheet @relation(fields: [timesheetId], references: [timesheetId])
  jobId       String    @default(uuid())

  oldJobId Int

  days Day[]

  isActive             Boolean
  name                 String
  budgetOriginalCents  Int?
  budgetCurrentCents   Int?
  originalLaborSeconds Int?
  currentLaborSeconds  Int?
  jobType              JobType

  @@id(fields: [timesheetId, jobId], name: "jobPrimaryKey")
  @@unique([timesheetId, oldJobId])
}

enum JobType {
  PRIVATE
  STATE
  FEDERAL
}

model Day {
  timesheetId String
  jobId       String
  job         Job    @relation(fields: [timesheetId, jobId], references: [timesheetId, jobId])
  dayId       Int

  editor   Account? @relation(fields: [editorId], references: [accountId])
  editorId String?

  entries Entry[]

  description String

  @@id(fields: [timesheetId, jobId, dayId], name: "dayPrimaryKey")
}

model Entry {
  timesheetId String
  jobId       String
  dayId       Int
  day         Day    @relation(fields: [timesheetId, jobId, dayId], references: [timesheetId, jobId, dayId])
  entryId     String @default(uuid())

  employee   Employee @relation(fields: [timesheetId, employeeId], references: [timesheetId, employeeId])
  employeeId String

  // Approved by admin and counted in timesheet.
  isApproved              Boolean
  entryConfirmationStatus EntryConfirmationStatus

  timeInSeconds  Int
  timeOutSeconds Int
  lunchSeconds   Int

  @@id(fields: [timesheetId, jobId, dayId, entryId], name: "entryPrimaryKey")
}

enum EntryConfirmationStatus {
  UNINITIALIZED
  AWAITING
  CONFIRMED
}

model Action {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())

  actor   Account @relation(fields: [actorId], references: [accountId])
  actorId String

  targetId String

  actionType String
  actionJson Json
}
